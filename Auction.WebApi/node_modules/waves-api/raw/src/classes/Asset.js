"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var config_1 = require("../config");
/** TEMPORARY MOCKS */
var transactions_1 = require("../api/node/v1/transactions");
var Asset = /** @class */ (function () {
    function Asset(props) {
        if (!props.id) {
            throw new Error('An attempt to create Asset without ID');
        }
        if (!props.name) {
            throw new Error('An attempt to create Asset without a name');
        }
        if (typeof props.precision !== 'number' || props.precision < 0 || props.precision > 8) {
            throw new Error("An attempt to create Asset with wrong precision (" + props.precision + ")");
        }
        this.id = props.id;
        this.name = props.name;
        this.precision = props.precision;
        this.description = props.description || '';
        this.rating = 0;
        this.ticker = '';
    }
    Asset.prototype.toString = function () {
        return this.id;
    };
    return Asset;
}());
var storages = Object.create(null);
function resolveStorage() {
    var network = config_1.default.getNetworkByte();
    if (storages[network]) {
        return storages[network];
    }
    else {
        storages[network] = Object.create(null);
        putAsset(storages[network], constants_1.WAVES_PROPS);
        return storages[network];
    }
}
function putAsset(storage, assetProps) {
    var asset = new Asset(assetProps);
    storage[asset.id] = asset;
    return asset;
}
exports.default = {
    create: function (props) {
        var storage = resolveStorage();
        if (storage[props.id]) {
            return storage[props.id];
        }
        else {
            putAsset(storage, props);
            return storage[props.id];
        }
    },
    get: function (id) {
        var storage = resolveStorage();
        if (storage[id]) {
            return Promise.resolve(storage[id]);
        }
        else {
            return transactions_1.default.get(id).then(function (assetTransaction) {
                return putAsset(storage, {
                    id: id,
                    name: assetTransaction.name,
                    precision: assetTransaction.decimals,
                    description: assetTransaction.description
                });
            }, function () { return null; });
        }
    },
    getKnownAssets: function () {
        var storage = resolveStorage();
        return Object.keys(storage).map(function (key) {
            return storage[key];
        });
    },
    clearCache: function () {
        storages = Object.create(null);
    },
    isAsset: function (object) {
        return object instanceof Asset;
    }
};
//# sourceMappingURL=Asset.js.map