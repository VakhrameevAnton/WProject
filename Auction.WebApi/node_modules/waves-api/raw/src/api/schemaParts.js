"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var remap_1 = require("../utils/remap");
var ts_api_validator_1 = require("ts-api-validator");
var constants = require("../constants");
var Money_1 = require("../classes/Money");
var MoneyPart = /** @class */ (function (_super) {
    __extends(MoneyPart, _super);
    function MoneyPart() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MoneyPart.prototype.getValue = function (data) {
        if (data && Money_1.default.isMoney(data)) {
            return data;
        }
        else if (typeof data === 'string' && this.options.assetId) {
            // TODO : replace with `fromTokens` in the new API
            return Money_1.default.fromCoins(data, this.options.assetId);
        }
        else {
            return null;
        }
    };
    return MoneyPart;
}(ts_api_validator_1.BasePart));
exports.MoneyPart = MoneyPart;
exports.default = {
    publicKey: {
        type: ts_api_validator_1.StringPart,
        required: true
    },
    assetId: {
        type: ts_api_validator_1.StringPart,
        required: true
    },
    fee: {
        type: ts_api_validator_1.NumberPart,
        required: false,
        defaultValue: constants.MINIMUM_FEE
    },
    issueFee: {
        type: ts_api_validator_1.NumberPart,
        required: false,
        defaultValue: constants.MINIMUM_ISSUE_FEE
    },
    recipient: {
        type: ts_api_validator_1.StringPart,
        required: true,
        parseValue: remap_1.removeRecipientPrefix
    },
    reissuable: {
        type: ts_api_validator_1.BooleanPart,
        required: false,
        defaultValue: false
    },
    timestamp: {
        type: ts_api_validator_1.NumberPart,
        required: true,
        parseValue: remap_1.getTimestamp
    }
};
//# sourceMappingURL=schemaParts.js.map